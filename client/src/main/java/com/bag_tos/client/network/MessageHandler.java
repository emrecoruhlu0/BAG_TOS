package com.bag_tos.client.network;

import com.bag_tos.client.controller.GameController;
import com.bag_tos.client.controller.LobbyController;
import com.bag_tos.client.model.GameState;
import com.bag_tos.client.model.Player;
import javafx.application.Platform;

/**
 * Sunucudan gelen mesajlarÄ± iÅŸleyip ilgili kontrolcÃ¼lere yÃ¶nlendiren sÄ±nÄ±f
 */
public class MessageHandler implements NetworkManager.MessageListener {
    private GameController gameController;
    private LobbyController lobbyController;
    private GameState gameState;

    /**
     * Oyun kontrolcÃ¼sÃ¼ ile mesaj iÅŸleyici oluÅŸturur
     *
     * @param gameController Oyun kontrolcÃ¼sÃ¼
     * @param gameState Oyun durumu
     */
    public MessageHandler(GameController gameController, GameState gameState) {
        this.gameController = gameController;
        this.lobbyController = null;
        this.gameState = gameState;
    }

    /**
     * Lobi kontrolcÃ¼sÃ¼ ile mesaj iÅŸleyici oluÅŸturur
     *
     * @param lobbyController Lobi kontrolcÃ¼sÃ¼
     * @param gameState Oyun durumu
     */
    public MessageHandler(LobbyController lobbyController, GameState gameState) {
        this.lobbyController = lobbyController;
        this.gameController = null;
        this.gameState = gameState;
    }

    @Override
    public void onMessageReceived(String message) {
        // Mesaj tipine gÃ¶re ayrÄ±ÅŸtÄ±rma ve iÅŸleme
        if (message.startsWith("SISTEM:")) {
            handleSystemMessage(message);
        } else if (message.startsWith("[GECE]") || message.startsWith("[GÃœNDÃœZ]")) {
            handlePhaseMessage(message);
        } else if (message.startsWith("AKSIYON:")) {
            handleActionMessage(message);
        } else if (message.startsWith("ğŸ”®")) {
            handleMafiaMessage(message);
        } else if (message.contains("ROL:")) {
            handleRoleAssignment(message);
        } else if (message.contains("lobiye katildi")) {
            handlePlayerJoin(message);
        } else if (message.contains("OLDURULDUN")) {
            handlePlayerDeath(message);
        } else if (message.contains("ASILDIN")) {
            handlePlayerHanged(message);
        } else if (message.contains("OYUN BÄ°TTÄ°")) {
            handleGameEnd(message);
        } else {
            handleChatMessage(message);
        }

        // UI Thread'de arayÃ¼zÃ¼ gÃ¼ncelle
        updateUI();
    }

    @Override
    public void onConnectionClosed() {
        if (gameController != null) {
            gameController.handleDisconnect();
        } else if (lobbyController != null && lobbyController.getView() != null) {
            lobbyController.handleDisconnect();
        }
    }

    /**
     * Sistem mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Sistem mesajÄ±
     */
    private void handleSystemMessage(String message) {
        gameState.addSystemMessage(message);

        if (gameController != null) {
            gameController.handleSystemMessage(message);
        } else if (lobbyController != null && lobbyController.getView() != null) {
            lobbyController.addChatMessage(message);
        }

        // Oyun baÅŸlama kontrolÃ¼
        if (message.contains("Oyun basliyor")) {
            if (lobbyController != null && lobbyController.getView() != null) {
                Platform.runLater(() -> lobbyController.startGame());
            }
        }
    }

    /**
     * Faz deÄŸiÅŸikliÄŸi mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Faz mesajÄ±
     */
    private void handlePhaseMessage(String message) {
        if (message.contains("[GECE]")) {
            gameState.setCurrentPhase(GameState.Phase.NIGHT);
        } else {
            gameState.setCurrentPhase(GameState.Phase.DAY);
        }
        gameState.addSystemMessage(message);

        if (gameController != null) {
            gameController.handleSystemMessage(message);
        }
    }

    /**
     * Aksiyon mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Aksiyon mesajÄ±
     */
    private void handleActionMessage(String message) {
        gameState.setAvailableAction(message.substring(9));
        gameState.addSystemMessage(message);

        if (gameController != null) {
            gameController.handleSystemMessage(message);
        }
    }

    /**
     * Mafya mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Mafya mesajÄ±
     */
    private void handleMafiaMessage(String message) {
        gameState.addMafiaMessage(message);

        if (gameController != null) {
            gameController.handleMafiaMessage(message);
        }
    }

    /**
     * Rol atama mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Rol mesajÄ±
     */
    private void handleRoleAssignment(String message) {
        // "ROL: Mafya" gibi mesajlardan rolÃ¼ ayÄ±kla
        if (message.contains("ROL:")) {
            String role = message.split("ROL:")[1].trim();
            gameState.setCurrentRole(role);
            gameState.addSystemMessage("RolÃ¼nÃ¼z: " + role);

            if (gameController != null) {
                gameController.handleSystemMessage("RolÃ¼nÃ¼z: " + role);
            }
        }
    }

    /**
     * Oyuncu katÄ±lÄ±mÄ±nÄ± iÅŸler
     *
     * @param message KatÄ±lÄ±m mesajÄ±
     */
    private void handlePlayerJoin(String message) {
        // "SISTEM: username lobiye katildi! (2/4)" formatÄ±ndaki mesajÄ± iÅŸle
        try {
            String username = message.split(" ")[1];
            Player player = new Player(username);
            gameState.addPlayer(player);

            if (lobbyController != null && lobbyController.getView() != null) {
                lobbyController.updatePlayerList();
                lobbyController.addChatMessage(message);
            }
        } catch (Exception e) {
            System.err.println("Oyuncu katÄ±lÄ±mÄ± iÅŸlenirken hata: " + e.getMessage());
        }
    }

    /**
     * Oyuncu Ã¶lÃ¼mÃ¼nÃ¼ iÅŸler
     *
     * @param message Ã–lÃ¼m mesajÄ±
     */
    private void handlePlayerDeath(String message) {
        gameState.setAlive(false);

        if (gameController != null) {
            gameController.handleSystemMessage("Ã–ldÃ¼rÃ¼ldÃ¼nÃ¼z!");
        }
    }

    /**
     * Oyuncu asÄ±lmasÄ±nÄ± iÅŸler
     *
     * @param message AsÄ±lma mesajÄ±
     */
    private void handlePlayerHanged(String message) {
        gameState.setAlive(false);

        if (gameController != null) {
            gameController.handleSystemMessage("AsÄ±ldÄ±nÄ±z!");
        }
    }

    /**
     * Oyun sonu mesajÄ±nÄ± iÅŸler
     *
     * @param message Oyun sonu mesajÄ±
     */
    private void handleGameEnd(String message) {
        if (gameController != null) {
            gameController.handleGameEnd(message);
        }
    }

    /**
     * Genel sohbet mesajlarÄ±nÄ± iÅŸler
     *
     * @param message Sohbet mesajÄ±
     */
    private void handleChatMessage(String message) {
        gameState.addChatMessage(message);

        if (gameController != null) {
            gameController.handleChatMessage(message);
        } else if (lobbyController != null && lobbyController.getView() != null) {
            lobbyController.addChatMessage(message);
        }
    }

    /**
     * ArayÃ¼zÃ¼ gÃ¼nceller
     */
    private void updateUI() {
        if (gameController != null) {
            gameController.updateUI();
        } else if (lobbyController != null && lobbyController.getView() != null) {
            lobbyController.updatePlayerList();
        }
    }
}